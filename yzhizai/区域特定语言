### Goal
我们的目标是从R中更加容易的产生HTML。一个具体的例子，我们使用R产生下面的代码：
```html
<body>
  <h1 id='first'>A heading</h1>
  <p>Some text &amp; <b>some bold text.</b></p>
  <img src='myimg.png' width='100' height='100' />
</body>
```
实现它，我们按照下面的做法：
```{r, eval = FALSE}
with_html(body(
  h1("A heading", id = "first"),
  p("Some text &", b("some bold text.")),
  img(src = "myimg.png", width = 100, height = 100)
))
```
注意函数嵌套的调用和tags的嵌套是一样的：未命名的变量成为tag的内容。命名的变量是它们的属性。因为在它们的API中tags和文本是明显不同的，我们可以使用转义特殊的字符串。
### Escaping
对于DSLs转义是十分必要的，它是我们的第一个课题。创建一个转义字符的方式，我们需要赋予'&'一个特殊的含义，避免双重转义。最简单的方式是创建一个S3类来识别常规的文本和HTML。
```{r escape}
html <- function(x) structure(x, class = "html")
print.html <- function(x, ...) {
  out <- paste0("<HTML> ", x)
  cat(paste(strwrap(out), collapse = "\n"), "\n", sep = "")
}
```
然后我们写一个转义的方法，保证HTML不变，而是转换其它的特殊字符(`&`,`<`,`>`)。为了方便我们创建一个列表的方法。
```{r}
escape <- function(x) UseMethod("escape")
escape.html <- function(x) x
escape.character <- function(x) {
  x <- gsub("&", "&amp;", x)
  x <- gsub("<", "&lt;", x)
  x <- gsub(">", "&gt;", x)

  html(x)
}
escape.list <- function(x) {
  lapply(x, escape)
}

# Now we check that it works
escape("This is some text.")
escape("x > 1 & y < 2")

# Double escaping is not a problem
escape(escape("This is some text. 1 > 2"))

# And text we know is HTML doesn't get escaped.
escape(html("<hr />"))
```
转义是许多DSLs的重要成分。
### Basic tag functions
下一步，我们写一个简单的tag函数，然后考虑如何泛化这函数去创建所有的HTML tag。让我们从`<p>`开始。HTML tag有属性和child。我们需要在函数调用中分割这些。认定，属性是命名的值并且child没有名字，从命名的变量中分离未命名的变量是很自然的。例如，调用`p()`应该是下面的样子：
```{r, eval = FALSE}
p("Some text.", b("some bold text"), class = "mypara")
```
我们可以在`<p>`中列出所有可能的属性。然而，这是很困难的，因为有太多的属性了，而且用户还可以自定义属性。因此，我们只使用`...`。并且依据是否有名字进行分别。为了能够正确的使用，我们需要知道`names()`。
```{r names}
names(c(a = 1, b = 2))
names(c(a = 1, 2))
names(c(1, 2))
```
我们创建两个辅助函数来分离：
```{r named}
named <- function(x) {
  if (is.null(names(x))) return(NULL)
  x[names(x) != ""]
}
unnamed <- function(x) {
  if (is.null(names(x))) return(x)
  x[names(x) == ""]
}
```
现在我们可以创建自己的`p()`函数。注意这里有一个新的函数`html_attributes()`。它使用值-变量的对的列表去创建HTML属性的特异性。这个有点复杂：

```{r p}
source("dsl-html-attributes.r", local = TRUE)
p <- function(...) {
  args <- list(...)
  attribs <- html_attributes(named(args))
  children <- unlist(escape(unnamed(args)))

  html(paste0(
    "<p", attribs, ">",
    paste(children, collapse = ""),
    "</p>"
  ))
}

p("Some text")
p("Some text", id = "myid")
p("Some text", image = NULL)
p("Some text", class = "important", "data-value" = 10)
```
### Tag functions
有`p()`的定义，很容易明白如何将它转化到其它的tag：我们只需要替换`p`的名字即可。我们将要使用闭包函数来创建tag函数：
```{r}
tag <- function(tag) {
  force(tag)
  function(...) {
    args <- list(...)
    attribs <- html_attributes(named(args))
    children <- unlist(escape(unnamed(args)))

    html(paste0(
      "<", tag, attribs, ">",
      paste(children, collapse = ""),
      "</", tag, ">"
    ))
  }
}
```
现在我们来执行我们简单的例子：
```{r}
p <- tag("p")
b <- tag("b")
i <- tag("i")
p("Some text.", b("Some bold text"), i("Some italic text"),
  class = "mypara")
```
在我们将要为每一个可能的HTML tag写函数的时候，我们需要创建一个`tag()`的变体。它与`tag()`类似，但是如果有没有命名的tag，需要抛出一个error。并且要注意tag本身要看起来不一样：
```{r}
void_tag <- function(tag) {
  force(tag)
  function(...) {
    args <- list(...)
    if (length(unnamed(args)) > 0) {
      stop("Tag ", tag, " can not have children", call. = FALSE)
    }
    attribs <- html_attributes(named(args))

    html(paste0("<", tag, attribs, " />"))
  }
}

img <- void_tag("img")
img(src = "myimage.png", width = 100, height = 100)
```
### Processing all tags
现在我们需要一个HTML tag的列表：
```{r}
tags <- c("a", "abbr", "address", "article", "aside", "audio", 
  "b","bdi", "bdo", "blockquote", "body", "button", "canvas", 
  "caption","cite", "code", "colgroup", "data", "datalist", 
  "dd", "del","details", "dfn", "div", "dl", "dt", "em", 
  "eventsource","fieldset", "figcaption", "figure", "footer", 
  "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", 
  "hgroup", "html", "i","iframe", "ins", "kbd", "label", 
  "legend", "li", "mark", "map","menu", "meter", "nav", 
  "noscript", "object", "ol", "optgroup", "option", "output", 
  "p", "pre", "progress", "q", "ruby", "rp","rt", "s", "samp", 
  "script", "section", "select", "small", "span", "strong", 
  "style", "sub", "summary", "sup", "table", "tbody", "td", 
  "textarea", "tfoot", "th", "thead", "time", "title", "tr",
  "u", "ul", "var", "video")

void_tags <- c("area", "base", "br", "col", "command", "embed",
  "hr", "img", "input", "keygen", "link", "meta", "param", 
  "source", "track", "wbr")
```
如果我们仔细的查看这个列表，发现有一些tag和base R的函数的名字是类似的。并且其它的与一些比较出名的包的名字相同。这意味着我们不需要产生一些函数，或者在全局环境中或者是在包的环境中。反而，我们把它们放到一些代码中，便于使用。首先我们创建一个命名的列表：

```{r}
tag_fs <- c(
  setNames(lapply(tags, tag), tags),
  setNames(lapply(void_tags, void_tag), void_tags)
)
```
这给了我们一个显式的方式来调用tag函数：
```{r}
tag_fs$p("Some text.", tag_fs$b("Some bold text"),
  tag_fs$i("Some italic text"))
```
我们可以结束我们的HTML DSL：
```{r}
with_html <- function(code) {
  eval(substitute(code), tag_fs)
}
```
已经有一足够的API来写我们的HTML:
```{r}
with_html(body(
  h1("A heading", id = "first"),
  p("Some text &", b("some bold text.")),
  img(src = "myimg.png", width = 100, height = 100)
))
```
###练习
## LaTeX {#latex}
下面的DSL将会转换R的表达式为LaTeX的数学等式。LaTeX是一种数学和统计的通用语：无论你什么时候想要在一个文本中写一个数学的表达式，你按照LaTeX的格式。既然R和LaTeX如此的火，有的时候你想要将在其中的一个表达式转换为另一个。
因为我们想要转换函数的名字，因此，这种数学的DSL比HTML要难。我们同时也要创造一个‘默认’转换。所以我们不知道的表达式也能有一个正确的表示。

在开始之前，先看一下LaTeX中，数学公式是如何写的。
### LaTeX mathematics

LaTeX中的数学是十分复杂的。幸运的是，它们很好的修订过。也就是它们有一个普遍简单的结构：

* 大多数简单的数学公式与R的写法是一样的。
* 特殊的符号以`\`开始。
* 更加复杂的函数，是下面的这个样子：`\name{arg1}{arg2}`。
* 组的成分用`{}`。
* 好的数学排版中，差别是变量和函数。
### Goal
我们的目标是自动的将R的公式转化为LaTeX中的正确形式。我们将会分四步解决它：

* 把已知的符号进行转换：`pi`->`\pi`
* 其它的一些符号不进行改变：`x`->`x`
* 将已知的函数转化为正确的形式：`sqrt(frac(a, b))` -> `\sqrt{\frac{a, b}}`
* 未知的函数： `\textrm`: `f(a)` -> `\textrm{f}(a)`

我们将使用与HTML编码相反的方向进行处理。我们将会从基础结构出发，因为它们在我们的DSL中比较容易检验，然后产生我们想要的输出。

### `to_math`
首先，我们需要一个封装函数将R的表达式转化成LaTeX。这个和`to_html()`是一样的：捕获未被评估的表达式，然后在一个特殊的环境中进行评估。然而，这个特殊的环境并不是固定的。它将会根据表达式进行修改。我们这样做是为了解决我们未曾遇到过的形式。
```{r}
to_math <- function(x) {
  expr <- substitute(x)
  eval(expr, latex_env(expr))
}
```
### Known symbols
我们首先创建一个环境，将会将Greek用的符号进行转换。这是在`subset`中的一个小小的技巧，就是通过名字选择特定的列。`subset(mtcars, cyl:wt)`。在特定的环境中将一个名字绑定给一个字符串。
我们通过命名一个向量进行环境的创建，把向量转换成列表，然后把列表转换成环境：
```{r}
greek <- c(
  "alpha", "theta", "tau", "beta", "vartheta", "pi", "upsilon",
  "gamma", "gamma", "varpi", "phi", "delta", "kappa", "rho",
  "varphi", "epsilon", "lambda", "varrho", "chi", "varepsilon",
  "mu", "sigma", "psi", "zeta", "nu", "varsigma", "omega", "eta",
  "xi", "Gamma", "Lambda", "Sigma", "Psi", "Delta", "Xi", 
  "Upsilon", "Omega", "Theta", "Pi", "Phi")
greek_list <- setNames(paste0("\\", greek), greek)
greek_env <- list2env(as.list(greek_list), parent = emptyenv())
```
然后我们可以检验：
```{r}
latex_env <- function(expr) {
  greek_env
}

to_math(pi)
to_math(beta)
```
### Unknown symbols
如果符号不是希腊字母，我们只需要保证它是原来的样子。这是一个欺骗因为我们不知道这个符号之前是用来干嘛的。所以我们需要一点元编程来了解这个符号在这个表达式是用来干啥的。`all_names`得到这个表达式，然后进行下面的操作：如果是一个名字，它把它转化成一个字符串。如果是一个调用，它通过变量一起递归下去。
```{r}
all_names <- function(x) {
  if (is.atomic(x)) {
    character()
  } else if (is.name(x)) {
    as.character(x)
  } else if (is.call(x) || is.pairlist(x)) {
    children <- lapply(x[-1], all_names)
    unique(unlist(children))
  } else {
    stop("Don't know how to handle type ", typeof(x), 
      call. = FALSE)
  }
}

all_names(quote(x + y + f(a, b, c, 10)))
```
现在我们想要获取这样一个列表，并且将它转化成环境，这样每一个符号对应一个字符串表示。我们再次使用这种转换模式，将一个命名的字符串转化成一个列表，然后把一个列表转化成环境。
```{r}
latex_env <- function(expr) {
  names <- all_names(expr)
  symbol_list <- setNames(as.list(names), names)
  symbol_env <- list2env(symbol_list)

  symbol_env
}

to_math(x)
to_math(longvariablename)
to_math(pi)
```
这个工作了，但是我们需要与希腊字符的环境结合起来。既然我们想要给定一个希腊环境，那么`symbol_env`应该是`greek_env`的parent。既然R没有一个函数是为了闭包环境，我们可以使用存在的两个函数来创建一个。
```{r}
clone_env <- function(env, parent = parent.env(env)) {
  list2env(as.list(env), parent = parent)
}
```
这个给我们了一个可以转换已知和未知的符号的函数。
```{r}
latex_env <- function(expr) {
  # Unknown symbols
  names <- all_names(expr)
  symbol_list <- setNames(as.list(names), names)
  symbol_env <- list2env(symbol_list)

  # Known symbols
  clone_env(greek_env, symbol_env)
}

to_math(x)
to_math(longvariablename)
to_math(pi)
```
### Known functions
下面我们将把我们的函数添加到DSL。我们从两个帮助的封装函数开始，方便的添加一元或者二元的操作符。这些函数很简单：他们只是收集字符串。
```{r}
unary_op <- function(left, right) {
  force(left)
  force(right)
  function(e1) {
    paste0(left, e1, right)
  }
}

binary_op <- function(sep) {
  force(sep)
  function(e1, e2) {
    paste0(e1, sep, e2)
  }
}
```
使用这些辅助函数，我们可以定位一些R到LaTeX的解释的例子。注意有R的词法作用域的帮助，我们可以很方便的给一些标准函数提供一些新的的意思。
```{r}
# Binary operators
f_env <- new.env(parent = emptyenv())
f_env$"+" <- binary_op(" + ")
f_env$"-" <- binary_op(" - ")
f_env$"*" <- binary_op(" * ")
f_env$"/" <- binary_op(" / ")
f_env$"^" <- binary_op("^")
f_env$"[" <- binary_op("_")

# Grouping
f_env$"{" <- unary_op("\\left{ ", " \\right}")
f_env$"(" <- unary_op("\\left( ", " \\right)")
f_env$paste <- paste

# Other math functions
f_env$sqrt <- unary_op("\\sqrt{", "}")
f_env$sin <- unary_op("\\sin(", ")")
f_env$log <- unary_op("\\log(", ")")
f_env$abs <- unary_op("\\left| ", "\\right| ")
f_env$frac <- function(a, b) {
  paste0("\\frac{", a, "}{", b, "}")
}

# Labelling
f_env$hat <- unary_op("\\hat{", "}")
f_env$tilde <- unary_op("\\tilde{", "}")
```
我们再次修改`latex_env()`来包含这样的环境。这应该是R查找的最后一个环境：换句话说，`sin(sin)`是可以正常工作的。
```{r}
latex_env <- function(expr) {
  # Known functions
  f_env

  # Default symbols
  names <- all_names(expr)
  symbol_list <- setNames(as.list(names), names)
  symbol_env <- list2env(symbol_list, parent = f_env)

  # Known symbols
  greek_env <- clone_env(greek_env, parent = symbol_env)
}

to_math(sin(x + pi))
to_math(log(x_i ^ 2))
to_math(sin(sin))
```
### Unknown functions
最后我们对函数增加一些默认项。像不知道的名字，我们先前并不知道它们是什么，所以我们还是要使用一些元编程的东西来操作。
```{r}
all_calls <- function(x) {
  if (is.atomic(x) || is.name(x)) {
    character()
  } else if (is.call(x)) {
    fname <- as.character(x[[1]])
    children <- lapply(x[-1], all_calls)
    unique(c(fname, unlist(children)))
  } else if (is.pairlist(x)) {
    unique(unlist(lapply(x[-1], all_calls), use.names = FALSE))
  } else {
    stop("Don't know how to handle type ", typeof(x), call. = FALSE)
  }
}

all_calls(quote(f(g + b, c, d(a))))
```
并且我们需要一个封装来对每一个未知的调用产生函数。
```{r}
unknown_op <- function(op) {
  force(op)
  function(...) {
    contents <- paste(..., collapse = ", ")
    paste0("\\mathrm{", op, "}(", contents, ")")
  }
}
```
然后我们再次修改`latex_env()`：
```{r}
latex_env <- function(expr) {
  calls <- all_calls(expr)
  call_list <- setNames(lapply(calls, unknown_op), calls)
  call_env <- list2env(call_list)

  # Known functions
  f_env <- clone_env(f_env, call_env)

  # Default symbols
  symbols <- all_names(expr)
  symbol_list <- setNames(as.list(symbols), symbols)
  symbol_env <- list2env(symbol_list, parent = f_env)

  # Known symbols
  greek_env <- clone_env(greek_env, parent = symbol_env)
}

to_math(f(a * b))
```
###练习
